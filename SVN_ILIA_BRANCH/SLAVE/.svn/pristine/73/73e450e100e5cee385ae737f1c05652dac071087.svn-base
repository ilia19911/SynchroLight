#include "Player.h"


Player::Player(struct NetButton Buttons[],int NumberOfNetBut,class ArtNetSend &artnet)
{
  NumberOfNetButtons=NumberOfNetBut;// копирууем количество сетевых кнопок

    NetButtons=Buttons;// копируем массив сетевых кнопок, не уверен что правильно

  artnet0=&artnet;// делаем ссылку нашего экземпляра артнет на тот что внесли в конструктор
}

void Player::PlayScen()
{
  for(int i=0;i<NumberOfNetButtons;i++)
  {
    if(NetButtons[i].flag==4)// если сабмастера сцен были изменены через сеть скорее всего сервером
    {
      float submaster=float(NetButtons[i].GrandMaster)/255;
      for(int q=0;q<512;q++)
      {
        if(dueFlashStorage.read(100+q+((i)*550))>0)// если записано значение отличное от нуля
        {
          artnet0->buffer_dmx[q]=dueFlashStorage.read(100+q+((i)*550))*submaster;  //присваиваем значение каналу в соответствии с сабмастером выданой сцены
          if(artnet0->buffer_dmx[q]>0)DmxSnap[q][1]=i+1; //ставим марку что канал выдан из данной сцены
          if(artnet0->buffer_dmx[q]==0)DmxSnap[q][1]=0;
        }  
      }
      NetButtons[i].flag=0;
      //включаем или выключаем подсветку
      if(facePanel.GetLink(i)>=0)
      {
        if(submaster>0){facePanel.SetBackLight(facePanel.GetLink(i)+1,true);}
        else{facePanel.SetBackLight(facePanel.GetLink(i)+1,false);}
      }
    }
    if(NetButtons[i].flag==1)// если сабмастера сцен были изменены в ручном режиме
   // if(StatusOfButton[i][1]==1)// если сабмастера сцен были изменены в ручном режиме
    {
     // float submaster=float(StatusOfButton[i][0])/255;
     float submaster=float(NetButtons[i].GrandMaster)/255;
      for(int q=0;q<512;q++)
      {
       // if(dueFlashStorage.read(100+q+((DmxSnap[q][1]-1)*550))< dueFlashStorage.read(100+q+((i)*550)));// если значение канала этой сцены больше значения канала из сцены, которая сейчас проигрывается(приоритет большего)
       if(dueFlashStorage.read(100+q+((i)*550))>0)// если записано значение отличное от нуля
       {
         artnet0->buffer_dmx[q]=dueFlashStorage.read(100+q+((i)*550))*submaster;  //присваиваем значение каналу в соответствии с сабмастером выданой сцены
         if(artnet0->buffer_dmx[q]>0)DmxSnap[q][1]=i+1; //ставим марку что канал выдан из данной сцены
         if(artnet0->buffer_dmx[q]==0)DmxSnap[q][1]=0;
       }
      }
      NetButtons[i].flag=0;
       if(Consoles::_id_of_server==Consoles::_id)// если я сервер
      {
        NetButtons[i].Source=Consoles::_id;// записываем меня как источника кнопки
        Consoles::SetTimeButton(i);
        Consoles::SendPriorPacket(2);
      }
     //включаем или выключаем подсветку
      if(facePanel.GetLink(i)>=0)
      {
        if(submaster>0){facePanel.SetBackLight(facePanel.GetLink(i)+1,true);}
        else{facePanel.SetBackLight(facePanel.GetLink(i)+1,false);}
      }
    }
     if(NetButtons[i].flag==2)// если включено воспроизведение по времени
    {
      float Time=defaultTime;//в секундах
      float LastTime=millis()-TimeOfPlay[i];//прошедшее время
      float quotient=LastTime/Time;
      float primaryDmx=0;
     // Serial.println(((Time*1000)-(millis()-TimeOfPlay[i])));
      if(quotient>1){quotient=1;}
      for(int q=0;q<512;q++)
      {
        if(dueFlashStorage.read(100+q+(i*550))>0)// обрабатываем только значения отличные от нуля
        {
          if(DmxSnap[q][1]>0&&DmxSnap[q][1]!=255) { primaryDmx = dueFlashStorage.read(100+q+( (DmxSnap[q][1]-1) *550))*(float(NetButtons[DmxSnap[q][1]-1].GrandMaster)/255);}//    float(StatusOfButton[DmxSnap[q][1]-1][0])/255);}//вычитываем значение dmx напрямую из места последнего воспроизведения.или 
          if(DmxSnap[q][1]==255) { primaryDmx =DmxSnap[q][0];}//если значение введено в ручную, то читаем значение из последнего снимка буфера дмх
          if(DmxSnap[q][1]==0) { primaryDmx =0;}//если источник канала-0 то значение канала должно быть равным 0
          artnet0->buffer_dmx[q]=primaryDmx+(dueFlashStorage.read(100+q+(i*550))-primaryDmx)*quotient;
          if(quotient==1){DmxSnap[q][1]=i+1;}//если это последняя итерация, то ставим марку о том что этот канал выведен в соответствии с записаной сценой номер i-1
//          if(nextion.PageOfScreen==3) //если открыта страница диммерных каналов, то меняем значения на актуальные для этой сцены на открытой странице
          {
       //     if(q>(12*nextion.PageOfFader)-1&&q<(12*(1+nextion.PageOfFader)))
       //     {
       //       char txt[5];
       //       sprintf( txt,"%d%c",int(artnet0->buffer_dmx[q]),'%');
       //       nextion.SetTxt(q%12,txt,5);
       //       nextion.SetValume(1,q%12,artnet0->buffer_dmx[q]);// type 1-фейдер 2-бар
       //     }
          }
        }
      }
      if(quotient==1)// если коэффициент дошел до 1, то выключаем воспроизведение сцены и ставим субмастер на 255
      {
        NetButtons[i].flag=0;
        NetButtons[i].GrandMaster=255;
        if(Consoles::_id_of_server==Consoles::_id)// если я сервер
        {
          NetButtons[i].Source=Consoles::_id;// записываем меня как источника кнопки
          Consoles::SetTimeButton(i);
          Consoles::SendPriorPacket(2);
        }
        //включаем или выключаем подсветку
        if(facePanel.GetLink(i)>=0)
        {
          facePanel.SetBackLight(facePanel.GetLink(i)+1,true);
        }
      }
//      if(nextion.PageOfScreen==1)nextion.SetValume(2,i, 100*quotient);
    }
    if(NetButtons[i].flag==3)//  если включено затухание по времени
    {
      float Time=defaultTime;//в секундах
      float LastTime=millis()-TimeOfPlay[i];//прошедшее время
      float quotient=LastTime/Time;
      if(quotient>1){quotient=1;}
        for(int q=0;q<512;q++)
        {
          if(dueFlashStorage.read(100+q+(i*550))>0)// обрабатываем только значения отличные от нуля и выданные этой сценой или в ручную
          {
            if(DmxSnap[q][1]==i+1) artnet0->buffer_dmx[q]=(dueFlashStorage.read(100+q+(i*550))-(dueFlashStorage.read(100+q+(i*550))*quotient))*(float(NetButtons[i].GrandMaster)/255);//StatusOfButton[i][0])/255);//если канал дан из этой сцены. ТО БЕРЕМ ИНФОРМАЦИЮ ИЗ ЗАПИСИ
            if(DmxSnap[q][1]==255) artnet0->buffer_dmx[q]=(DmxSnap[q][0]-(DmxSnap[q][0]*quotient))*(float(NetButtons[i].GrandMaster)/255);//StatusOfButton[i][0])/255);//если канал дан вручную. ТО БЕРЕМ ИНФОРМАЦИЮ о канале ИЗ снимка потока   DmxSnap[q][0]
           // if(nextion.PageOfScreen==3)
           // {
           //   if(q>(12*nextion.PageOfFader)-1&&q<(12*(1+nextion.PageOfFader)))
           //   {
           //     char txt[5];
           //     sprintf( txt,"%d%c",int(artnet0->buffer_dmx[q]),'%');
           //     nextion.SetTxt(q%12,txt,5);
           //     nextion.SetValume(1,q%12,artnet0->buffer_dmx[q]);// type 1-фейдер 2-бар
           //   }
           // }
            if(artnet0->buffer_dmx[q]==0)DmxSnap[q][1]=0;
          }
        }
        if(quotient==1)// если коэффициент дошел до 1, то выключаем воспроизведение сцены и ставим субмастер на 0
        {
          NetButtons[i].flag=0;
          NetButtons[i].GrandMaster=0;
          if(Consoles::_id_of_server==Consoles::_id)// если я сервер
          {
            NetButtons[i].Source=Consoles::_id;// записываем меня как источника кнопки
            Consoles::SetTimeButton(i);
            Consoles::SendPriorPacket(2);       
          }
          //включаем или выключаем подсветку
          if(facePanel.GetLink(i)>=0)
          {
            facePanel.SetBackLight(facePanel.GetLink(i)+1,false);
          }
        }
//        if(nextion.PageOfScreen==1)nextion.SetValume(2,i, (100-(100*quotient))*(float(NetButtons[i].GrandMaster)/255));
      }
    }
  }
  
byte Player::SaveScen(byte index, byte len)
{
 // Serial1.print("page 6"); //открывается страница ожидания
 // nextion.NextionEnd();
  for (int i = 0; i < 512; i++)
  {
    dueFlashStorage.write(100 + i + ((index - 1) * 550), artnet0->buffer_dmx[i]);
    watchdogReset();
    Consoles::SendPriorPacket(1);
  }
  dueFlashStorage.write(612 + ((index - 1) * 550), len); // записываем длину имени
  for (int i = 513; i < 513 + len; i++) //записываем имя
  {
  //  dueFlashStorage.write(100 + i + ((index - 1) * 550), nextion.BufferOfKeyboard[i - 513]);
  }
//  Serial1.print("page 0"); //открывается страница сцен, возвращаемся туда, где были
 // nextion.NextionEnd();
//  nextion.RefreshScreen(1);
}
byte Player::DeleteScen(byte index)
{
//  Serial1.print("page 6"); //открывается страница ожидания
//  nextion.NextionEnd();
  
  for (int i = 0; i < 550; i++)
  {
    dueFlashStorage.write(100 + i + ((index - 1) * 550), 255);
    watchdogReset();
  }
//  Serial1.print("page 0"); //открывается страница сцен, возвращаемся туда, где были
//  nextion.NextionEnd();
//  nextion.RefreshScreen(1);
}
